const https = require("https");
const path = require("path");
const ConcatSource = require("webpack-sources").ConcatSource;
const RawSource = require("webpack-sources").RawSource;

class LifecycleHooksPlugin {
  apply(compiler) {
    // hook into multiple tapable instance's events 
    compiler.plugin(["run", "watch-run"], (compiler, callback) => {
      console.log("Starting build...");
      callback();
    });

    compiler.plugin("compilation", compilation => {
      compilation.plugin("additional-assets", callback => {
        https.get(
          "https://webpack.js.org/assets/icon-square-big.svg",
          response => {
            if (response.statusCode !== 200) {
              console.log("Could not download image");
              callback();
            }

            response.setEncoding("utf8");

            let rawData = "";
            response.on("data", chunk => {
              rawData += chunk;
            });

            response.on("end", () => {
              compilation.assets["webpack.svg"] = new RawSource(rawData);
              callback();
            });
          }
        );
      });

      compilation.plugin("optimize-chunk-assets", function(chunks, callback) {
        const now = new Date().toLocaleString();
        chunks.forEach(function(chunk) {
          chunk.files.forEach(function(filename) {
            const updatedSource = new ConcatSource(
              `/* Build time: ${now} */`,
              "\n",
              compilation.assets[filename]
            );

            delete compilation.assets[filename];

            compilation.assets[filename] = updatedSource;
          });
        });
        callback();
      });
    });

    compiler.plugin("should-emit", compilation => {
      // what if we have an error in a module?
      // debugger;
      return compilation.errors.length === 0; // nothing emitted if false
    });

    compiler.plugin("emit", (compilation, callback) => {
      // collect all generated assets
      let soVeryMuch;
      // Explore each chunk (build output):
      compilation.chunks.forEach(chunk => {
        // Explore each module within the chunk (built inputs):
        chunk.modules.forEach(module => {
          // Explore each source file path that was included into the module:
          module.fileDependencies.forEach(filepath => {});
        });

        // Explore each asset filename generated by the chunk:
        chunk.files.forEach(filename => {
          // Get the asset source for each file generated by the chunk:
          const source = compilation.assets[filename].source();

          soVeryMuch += `
          ### ${filename} starts here ### 
          ${source}
          ### ${filename} ends here ###
          `;
        });
      });

      compilation.assets["e-v-e-r-y-t-h-i-n-g.txt"] = new RawSource(soVeryMuch);

      callback();
    });

    compiler.plugin("done", stats => {
      // stats contain build log and trace
      // access emitted assets
      // console.log(stats.toJson().assets);
      console.log("Compilation done...");
    });

    compiler.plugin("invalid", (filename, changeTime) => {
      const updated = new Date(changeTime).toLocaleString();
      console.log(`File ${filename} was updated ${updated}...`);
    });
  }
}

module.exports = LifecycleHooksPlugin;
